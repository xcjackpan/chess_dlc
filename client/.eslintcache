[{"/home/jack/Documents/Programming/chess_dlc/client/src/index.js":"1","/home/jack/Documents/Programming/chess_dlc/client/src/App.tsx":"2","/home/jack/Documents/Programming/chess_dlc/client/src/Game.tsx":"3","/home/jack/Documents/Programming/chess_dlc/client/src/Utils.tsx":"4","/home/jack/Documents/Programming/chess_dlc/client/src/Piece.tsx":"5"},{"size":223,"mtime":1608598928820,"results":"6","hashOfConfig":"7"},{"size":536,"mtime":1608606772283,"results":"8","hashOfConfig":"7"},{"size":3868,"mtime":1608678532768,"results":"9","hashOfConfig":"7"},{"size":656,"mtime":1608678529672,"results":"10","hashOfConfig":"7"},{"size":8769,"mtime":1608685311892,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"le5m8n",{"filePath":"15","messages":"16","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"18"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/jack/Documents/Programming/chess_dlc/client/src/index.js",[],["26","27"],"/home/jack/Documents/Programming/chess_dlc/client/src/App.tsx",["28","29"],"import React, { useState } from 'react';\nimport Game from './Game';\n\nfunction App() {\n  const [isLoading, setIsLoading] = useState(false);\n  const [inGame, setInGame] = useState(true);\n\n  if (isLoading) {\n    return (\n      <div className=\"main\">\n        <div>Loading</div>\n      </div>\n    );\n  } else if (inGame) {\n    return (\n      <div className=\"main\">\n        <Game/>\n      </div>\n    );\n  } else if (!inGame) {\n    return (\n      <div className=\"main\">\n        <div>In lobby</div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n",["30","31"],"/home/jack/Documents/Programming/chess_dlc/client/src/Game.tsx",["32","33","34","35"],"import React, { useState } from 'react';\nimport \"./Board.css\";\nimport { Colors, PieceType, getPieceAt, squaresEqual, coordinate } from \"./Utils\";\nimport { buildPiece, copyPiece, Piece } from \"./Piece\";\n\nconst emptyBoard = [\n  [0,0,0,0,0,0,0,0],\n  [0,0,0,0,0,0,0,0],\n  [0,0,0,0,0,0,0,0],\n  [0,0,0,0,0,0,0,0],\n  [0,0,0,0,0,0,0,0],\n  [0,0,0,0,0,0,0,0],\n  [0,0,0,0,0,0,0,0],\n  [0,0,0,0,0,0,0,0]\n]\n\nconst testBoard = [\n  [-4,-2,-3,-5,-6,-3,-2,-4],\n  [-1,-1,-1,-1,-1,-1,-1,-1],\n  [0,0,0,0,0,0,0,0],\n  [0,0,0,0,0,0,0,0],\n  [0,0,0,0,0,0,0,0],\n  [0,0,0,0,0,0,0,0],\n  [1,1,1,1,1,1,1,1],\n  [4,2,3,5,6,3,2,4]\n]\n\nfunction processBoard(board: number[][]) {\n  let res: Piece[][] = [[],[],[],[],[],[],[],[]]\n  board.forEach((row, y) => {\n    row.forEach((elem) => {\n      res[y].push(buildPiece(elem))\n    })\n  })\n  return res\n}\n\nfunction renderSquare(coord: coordinate, piece: number, selected: boolean, selectSquare: any) {\n  return (\n    <div\n      className={`square${selected ? ` selected` : ``}`}\n      key={`${coord[0]}-${coord[1]}`}\n      onClick={()=>{selectSquare(coord)}}\n    >\n      {`${piece}`}\n    </div>\n  )\n}\n\nfunction Game() {\n  let processed: Piece[][] = processBoard(testBoard)\n\n  const [boardState, setBoardState]: [Piece[][], any] = useState(processed);\n  const [playerTurn, setTurn] = useState(false);\n  const [selectedSquare, setSelectedSquare]: [coordinate, any] = useState([-1,-1])\n\n  function makeMove(piece: coordinate, newSquare: coordinate, extraInfo?: any) {\n    // Move is guaranteed to be valid\n    // Build a copy of the board\n    let newBoard: Piece[][] = [[],[],[],[],[],[],[],[]]\n    boardState.forEach((row, y) => {\n      row.forEach((elem) => {\n        newBoard[y].push(copyPiece(elem))\n      })\n    })\n\n    newBoard[newSquare[0]][newSquare[1]] = getPieceAt(piece, boardState)\n    newBoard[piece[0]][piece[1]] = buildPiece(0)\n\n    console.log(extraInfo)\n    if (extraInfo.hasOwnProperty(\"enpassant\") && extraInfo[\"enpassant\"]) {\n      const movedPiece = getPieceAt(newSquare, boardState)\n      const diff = movedPiece.type === PieceType.WHITE_PAWN ? 1 : -1\n      newBoard[newSquare[0]-diff][newSquare[1]] = buildPiece(0)\n    }\n\n    newBoard[newSquare[0]][newSquare[1]].postMove(piece, newSquare, boardState)\n    newBoard.forEach((row, y) => {\n      row.forEach((elem, x) => {\n        elem.turnTick([x,y], newBoard)\n      })\n    })\n\n    setBoardState(newBoard)\n  }\n\n  function selectSquare(newSquare: coordinate) {\n    // 1. Check if there is a currently selected square. If not, select newSquare and done.\n    if (squaresEqual(newSquare, selectedSquare)) {\n      setSelectedSquare([-1, -1])\n      return\n    } else if (squaresEqual(selectedSquare, [-1, -1])) {\n      setSelectedSquare(newSquare)\n      return\n    }\n\n    // 2. If there is a currently selected square, check if there is a piece there. If not, select newSquare and done.\n    const pieceOnSquare: Piece = boardState[selectedSquare[0]][selectedSquare[1]]\n    if (pieceOnSquare.type === PieceType.NONE) {\n      setSelectedSquare(newSquare)\n      return\n    }\n\n    const [isValid, extraInfo] = pieceOnSquare.validateMove(selectedSquare, newSquare, boardState)\n    // 3. There is a currently selected piece, check if the new selection is a valid move. If not, select newSquare and done.\n    if (isValid) {\n      // 4. Move the piece\n      makeMove(selectedSquare, newSquare, extraInfo)\n      setSelectedSquare([-1, -1])\n    } else {\n      setSelectedSquare(newSquare, extraInfo)\n    }\n  }\n\n  return (\n    <div className=\"board\">\n      {boardState.map(\n        (row, x) => (\n          <div className=\"row\" key={x}>\n            {row.map((occupant, y) => renderSquare(\n              [x,y],\n              occupant.type,\n              squaresEqual(selectedSquare, [x,y]),\n              selectSquare,\n            ))}\n          </div>\n        )\n      )}\n    </div>\n  );\n}\n\nexport default Game;\n","/home/jack/Documents/Programming/chess_dlc/client/src/Utils.tsx",[],"/home/jack/Documents/Programming/chess_dlc/client/src/Piece.tsx",["36","37","38","39","40","41","42"],{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","severity":1,"message":"48","line":5,"column":21,"nodeType":"49","messageId":"50","endLine":5,"endColumn":33},{"ruleId":"47","severity":1,"message":"51","line":6,"column":18,"nodeType":"49","messageId":"50","endLine":6,"endColumn":27},{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","severity":1,"message":"52","line":3,"column":10,"nodeType":"49","messageId":"50","endLine":3,"endColumn":16},{"ruleId":"47","severity":1,"message":"53","line":6,"column":7,"nodeType":"49","messageId":"50","endLine":6,"endColumn":17},{"ruleId":"47","severity":1,"message":"54","line":54,"column":10,"nodeType":"49","messageId":"50","endLine":54,"endColumn":20},{"ruleId":"47","severity":1,"message":"55","line":54,"column":22,"nodeType":"49","messageId":"50","endLine":54,"endColumn":29},{"ruleId":"47","severity":1,"message":"52","line":1,"column":10,"nodeType":"49","messageId":"50","endLine":1,"endColumn":16},{"ruleId":"56","severity":1,"message":"57","line":90,"column":3,"nodeType":"58","messageId":"59","endLine":92,"endColumn":4},{"ruleId":"56","severity":1,"message":"57","line":138,"column":3,"nodeType":"58","messageId":"59","endLine":140,"endColumn":4},{"ruleId":"56","severity":1,"message":"57","line":156,"column":3,"nodeType":"58","messageId":"59","endLine":158,"endColumn":4},{"ruleId":"56","severity":1,"message":"57","line":196,"column":3,"nodeType":"58","messageId":"59","endLine":198,"endColumn":4},{"ruleId":"56","severity":1,"message":"57","line":215,"column":3,"nodeType":"58","messageId":"59","endLine":217,"endColumn":4},{"ruleId":"56","severity":1,"message":"57","line":256,"column":3,"nodeType":"58","messageId":"59","endLine":258,"endColumn":4},"no-native-reassign",["60"],"no-negated-in-lhs",["61"],"@typescript-eslint/no-unused-vars","'setIsLoading' is assigned a value but never used.","Identifier","unusedVar","'setInGame' is assigned a value but never used.","'Colors' is defined but never used.","'emptyBoard' is assigned a value but never used.","'playerTurn' is assigned a value but never used.","'setTurn' is assigned a value but never used.","@typescript-eslint/no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-global-assign","no-unsafe-negation"]